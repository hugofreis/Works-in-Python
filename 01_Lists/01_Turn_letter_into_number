# A function that gets a letter of the alphabet as an argument and in turn delivers the corresponding number as per the standard Latin alphabet (where A = 1 and Z = 26)

def letr_to_num(ins_letr):
    
    alphbt = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "N", "M", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
    lwrcs_alphbt = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "n", "m", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

    # Adjusting potential lowercase letters to uppercase
    if lwrcs_alphbt.count(ins_letr) > 0: # If the character inserted appears in the list of lowercase letters:
        letr_pos = lwrcs_alphbt.index(ins_letr) # The new variable letr_position is assigned the value of the position that the character inserted occupies within the alphabet, counting from zero
        ins_letr = alphbt[letr_pos] # Whichever lowercase letter was inserted is converted to the uppercase version of the same letter

    else: # If the letter was inserted in uppercase to begin with:
        letr_pos = alphbt.index(ins_letr) # The variable letr_position is assigned the value of the position that the character inserted occupies within the alphabet
    
    return letr_pos + 1
